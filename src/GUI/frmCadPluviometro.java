/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Beans.ListFazendasBeans;
import Beans.ListPluviometroBeans;
import Beans.TalhaoBeans;
import DAO.Diversas;
import static GUI.Principal.ListFazPermitidas;
import static GUI.Principal.listTalhao;
import Icones.FormatarICO;
import Utilitarios.Conexao;
import java.awt.Component;
import java.awt.Dimension;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.ListSelectionModel;

/**
 *
 * @author agroa
 */
public class frmCadPluviometro extends javax.swing.JInternalFrame {

    Diversas DiversasD;
    List<ListPluviometroBeans> listPluviometro;
    ListcellRenderer cellRenderer;

    public frmCadPluviometro() {
        initComponents();
        DiversasD = new Diversas();
        cellRenderer = new ListcellRenderer();
        carregarFazPermitidas();
        carregarPluviometros();
    }

    private void carregarFazPermitidas() {
        ListFazPermitidas = new ArrayList<>();
        if (ListFazPermitidas.isEmpty()) {
            ListFazPermitidas = DiversasD.ListpmFazenda();
        }
        ListFazendasBeans l = new ListFazendasBeans();
        l.setID(0);
        l.setNomeFazenda("-");
        cb_fazenda.addItem(l);
        for (ListFazendasBeans list : ListFazPermitidas) {
            cb_fazenda.addItem(list);
        }
    }

    private void carregarListatalhoes(Integer IdFazenda) {
        if (listTalhao == null) {
            listTalhao = DiversasD.ListTalhao();
        }
        DefaultListModel<TalhaoBeans> listModel = new DefaultListModel<>();
        for (TalhaoBeans list : listTalhao) {
            if (Objects.equals(list.getIdFazenda(), IdFazenda)) {
                listModel.addElement(list);
            }
        }
        list_talhoes.setCellRenderer(cellRenderer);
        list_talhoes.setModel(listModel);
    }

    private void carregarPluviometros() {
        listPluviometro = null;
        listPluviometro = new ArrayList<>();
        listPluviometro = DiversasD.ListPluviometro();

        ListPluviometroBeans b = new ListPluviometroBeans();
        b.setID(0);
        b.setDescricao("-");
        cb_pluviometro.removeAllItems();
        cb_pluviometro.addItem(b);
        for (ListPluviometroBeans list : listPluviometro) {
            cb_pluviometro.addItem(list);
        }
    }

    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_talhoes = new javax.swing.JList<>();
        txt_descricao = new javax.swing.JTextField();
        cb_fazenda = new javax.swing.JComboBox<>();
        btn_novo = new javax.swing.JButton();
        btn_Salvar = new javax.swing.JButton();
        btn_editar = new javax.swing.JButton();
        btn_excluir = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        cb_pluviometro = new javax.swing.JComboBox<>();

        setClosable(true);
        setResizable(true);
        setTitle("Cadastro de Pluviometros");
        setFont(new java.awt.Font("Agency FB", 1, 10)); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Descricão");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Fazenda");

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Talhões de Influência", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        list_talhoes.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        jScrollPane1.setViewportView(list_talhoes);

        txt_descricao.setEnabled(false);
        txt_descricao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_descricaoActionPerformed(evt);
            }
        });

        cb_fazenda.setEnabled(false);
        cb_fazenda.setPreferredSize(new java.awt.Dimension(150, 20));
        cb_fazenda.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_fazendaItemStateChanged(evt);
            }
        });

        btn_novo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/inserir_40x40.png"))); // NOI18N
        btn_novo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btn_novo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_novo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_novoActionPerformed(evt);
            }
        });

        btn_Salvar.setBackground(new java.awt.Color(255, 255, 255));
        btn_Salvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/salvar.png"))); // NOI18N
        btn_Salvar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btn_Salvar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_Salvar.setDisabledIcon(null);
        btn_Salvar.setEnabled(false);
        btn_Salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SalvarActionPerformed(evt);
            }
        });

        btn_editar.setBackground(new java.awt.Color(255, 255, 255));
        btn_editar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/editar_pequeno.png"))); // NOI18N
        btn_editar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btn_editar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_editar.setEnabled(false);
        btn_editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editarActionPerformed(evt);
            }
        });

        btn_excluir.setBackground(new java.awt.Color(255, 255, 255));
        btn_excluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/deletar_40x40.png"))); // NOI18N
        btn_excluir.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btn_excluir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_excluir.setEnabled(false);
        btn_excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_excluirActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Pluviometro");

        cb_pluviometro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_pluviometroItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(276, 276, 276)
                            .addComponent(btn_novo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btn_Salvar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btn_editar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btn_excluir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cb_pluviometro, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txt_descricao, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cb_fazenda, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cb_pluviometro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(cb_fazenda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_descricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_novo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_Salvar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_editar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_excluir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_descricaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_descricaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_descricaoActionPerformed

    private void btn_novoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_novoActionPerformed
        btn_Salvar.setEnabled(true);
        btn_editar.setEnabled(false);
        btn_excluir.setEnabled(false);
        cb_pluviometro.setSelectedIndex(0);
        habilitarCampos();
        limparCampos();
    }//GEN-LAST:event_btn_novoActionPerformed

    private void btn_SalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SalvarActionPerformed
        int cadastrar = JOptionPane.showConfirmDialog(null, "Deseja Salvar este pluviometro?", "Atenção", JOptionPane.YES_NO_OPTION);
        if (cadastrar == JOptionPane.YES_OPTION) {
            if (!txt_descricao.getText().equals("") && cb_fazenda.getSelectedIndex() > 0) {
                if (CadastrarPluviometro(list_talhoes)) {
                    limparCampos();
                    desabilitarCampos();
                    cb_pluviometro.setEnabled(true);
                    carregarPluviometros();
                    listTalhao = null;
                    listTalhao = DiversasD.ListTalhao();
                }
            }
        }
    }//GEN-LAST:event_btn_SalvarActionPerformed

    private void btn_editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editarActionPerformed
        int editar = JOptionPane.showConfirmDialog(null, "Deseja editar este pluviometro de Gado?", "Atenção", JOptionPane.YES_NO_OPTION);
        if (editar == JOptionPane.YES_OPTION) {
            if (cb_pluviometro.getSelectedIndex() > 0) {
                if (editarPluviometro(list_talhoes, getIdPluviometro(cb_pluviometro))) {
                    limparCampos();
                    desabilitarCampos();
                    btn_editar.setEnabled(false);
                    btn_excluir.setEnabled(false);
                    carregarPluviometros();
                    listTalhao = null;
                    listTalhao = DiversasD.ListTalhao();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Selecione o pluviometro que deseja editar!", "Erro", 0, FormatarICO.ICObtnSair());
            }
        }
    }//GEN-LAST:event_btn_editarActionPerformed

    private void btn_excluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_excluirActionPerformed
        int excluir = JOptionPane.showConfirmDialog(null, "Deseja excluir esta Escala de Gado?", "Atenção", JOptionPane.YES_NO_OPTION);
        if (excluir == JOptionPane.YES_OPTION) {
            if (cb_pluviometro.getSelectedIndex() > 0) {
                if (deletarPluviometro(list_talhoes, getIdPluviometro(cb_pluviometro))) {;
                    limparCampos();
                    desabilitarCampos();
                    btn_editar.setEnabled(false);
                    btn_excluir.setEnabled(false);
                    carregarPluviometros();
                    listTalhao = null;
                    listTalhao = DiversasD.ListTalhao();
                }
            }
            limparCampos();
            desabilitarCampos();
            btn_editar.setEnabled(false);
            btn_excluir.setEnabled(false);
        }
    }//GEN-LAST:event_btn_excluirActionPerformed

    private void cb_fazendaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_fazendaItemStateChanged
        carregarListatalhoes(getIdFazenda(cb_fazenda));
    }//GEN-LAST:event_cb_fazendaItemStateChanged

    private void cb_pluviometroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_pluviometroItemStateChanged
        if (cb_pluviometro.getSelectedIndex() > 0) {
            txt_descricao.setText(cb_pluviometro.getModel().getSelectedItem().toString());
            setJComboBoxFazenda(cb_fazenda, cb_pluviometro.getModel().getElementAt(cb_pluviometro.getSelectedIndex()).getIdFazenda());
            carregarListatalhoes(getIdFazenda(cb_fazenda));
            int[] indices = new int[300];
            int y = 0;
            for (int i = 0; i < list_talhoes.getModel().getSize(); i++) {
                if (Objects.equals(list_talhoes.getModel().getElementAt(i).getIdPluviometro(), getIdPluviometro(cb_pluviometro))) {
                    list_talhoes.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
                    indices[y] = i;
                    y = y + 1;
                }
            }
            list_talhoes.setSelectedIndices(indices);
            btn_editar.setEnabled(true);
            btn_excluir.setEnabled(true);
        } else {
            btn_editar.setEnabled(false);
            cb_fazenda.setSelectedIndex(0);
        }

    }//GEN-LAST:event_cb_pluviometroItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton btn_Salvar;
    javax.swing.JButton btn_editar;
    javax.swing.JButton btn_excluir;
    javax.swing.JButton btn_novo;
    private javax.swing.JComboBox<ListFazendasBeans> cb_fazenda;
    private javax.swing.JComboBox<ListPluviometroBeans> cb_pluviometro;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<TalhaoBeans> list_talhoes;
    private javax.swing.JTextField txt_descricao;
    // End of variables declaration//GEN-END:variables

    private Integer getIdFazenda(JComboBox<ListFazendasBeans> comboBox) {
        if (comboBox.getSelectedIndex() != 0) {
            return comboBox.getModel().getElementAt(comboBox.getSelectedIndex()).getID();
        }
        return 0;
    }

    private Integer getIdPluviometro(JComboBox<ListPluviometroBeans> comboBox) {
        if (comboBox.getSelectedIndex() != 0) {
            return comboBox.getModel().getElementAt(comboBox.getSelectedIndex()).getID();
        }
        return 0;
    }

    private void setJComboBoxFazenda(JComboBox<ListFazendasBeans> cb, Integer IdFazenda) {
        for (int i = 0; i < cb.getModel().getSize(); i++) {
            if (cb.getModel().getElementAt(i).getID() == IdFazenda) {
                cb.setSelectedIndex(i);
            }
        }
    }

    private void habilitarCampos() {
        txt_descricao.setEnabled(true);
        cb_fazenda.setEnabled(true);
    }

    private void limparCampos() {
        txt_descricao.setText("");
        cb_fazenda.setSelectedIndex(0);
//        cb_pluviometro.setSelectedIndex(0);
    }

    private void popularBeans() {

    }

    private void desabilitarCampos() {
        txt_descricao.setEnabled(false);
        cb_fazenda.setEnabled(false);
    }

    public Boolean CadastrarPluviometro(JList<TalhaoBeans> JList) {
        Conexao.ReiniciarCon();
        String insertPluv = "insert into cad_pluviometro (id_fazenda, descricao, status) values (?,?,?)";
        String UpdateCadtalhao = "update cad_talhao SET id_pluviometro = ? Where id = ?";
        try {
            Conexao.getConnection().setAutoCommit(false);
            PreparedStatement st = Conexao.getConnection().prepareStatement(insertPluv, Statement.RETURN_GENERATED_KEYS);
            st.setInt(1, getIdFazenda(cb_fazenda));
            st.setString(2, txt_descricao.getText());
            st.setBoolean(3, true);
            st.execute();
            ResultSet rs = st.getGeneratedKeys();
            int lastID = 0;
            while (rs.next()) {
                lastID = rs.getInt(1);
            }
            PreparedStatement stTalhao = Conexao.getConnection().prepareStatement(UpdateCadtalhao);
            for (int i = 0; i < JList.getModel().getSize(); i++) {
                if (JList.isSelectedIndex(i)) {
                    stTalhao.setInt(1, lastID);
                    stTalhao.setInt(2, JList.getModel().getElementAt(i).getID());
                    stTalhao.addBatch();
                }
            }
            stTalhao.executeBatch();
            Conexao.getConnection().commit();
            JOptionPane.showMessageDialog(null, "Pluviometro registrado com sucesso!", "Registro Salvo com Sucesso", 0, FormatarICO.ICObtnOk());
        } catch (SQLException ex) {
            try {
                Conexao.getConnection().rollback();
                Conexao.getConnection().setAutoCommit(true);
            } catch (SQLException ex1) {
                Logger.getLogger(frmCadPluviometro.class.getName()).log(Level.SEVERE, null, ex1);
            }
            JOptionPane.showMessageDialog(null, ex + "Erro ao salvar registro! ", "Erro", 0, FormatarICO.ICObtnSair());
            return false;
        }
        return true;
    }

    public Boolean editarPluviometro(JList<TalhaoBeans> JList, Integer IdPluviometro) {
        String insertPluv = "update cad_pluviometro SET id_fazenda = ?, descricao =? , status =? WHERE id = ? ";
        String UpdateCadtalhao = "update cad_talhao SET id_pluviometro = ? Where id = ?";
        try {
            Conexao.getConnection().setAutoCommit(false);
            PreparedStatement st = Conexao.getConnection().prepareStatement(insertPluv, Statement.RETURN_GENERATED_KEYS);
            st.setInt(1, getIdFazenda(cb_fazenda));
            st.setString(2, txt_descricao.getText());
            st.setBoolean(3, true);
            st.setInt(4, IdPluviometro);
            st.execute();

            PreparedStatement stTalhao = Conexao.getConnection().prepareStatement(UpdateCadtalhao);
            for (int i = 0; i < JList.getModel().getSize(); i++) {
                if (JList.isSelectedIndex(i)) {
                    stTalhao.setInt(1, IdPluviometro);
                    stTalhao.setInt(2, JList.getModel().getElementAt(i).getID());
                    stTalhao.addBatch();
                }
            }
            stTalhao.executeBatch();
            Conexao.getConnection().commit();
            JOptionPane.showMessageDialog(null, "Pluviometro registrado com sucesso!", "Registro Salvo com Sucesso", 0, FormatarICO.ICObtnOk());
        } catch (SQLException ex) {
            try {
                Conexao.getConnection().rollback();
                Conexao.getConnection().setAutoCommit(true);
            } catch (SQLException ex1) {
                Logger.getLogger(frmCadPluviometro.class.getName()).log(Level.SEVERE, null, ex1);
            }
            JOptionPane.showMessageDialog(null, ex + "Erro ao salvar registro! ", "Erro", 0, FormatarICO.ICObtnSair());
            return false;
        }
        return true;
    }

    public Boolean deletarPluviometro(JList<TalhaoBeans> JList, Integer IdPluviometro) {
        String insertPluv = "delete from cad_pluviometro WHERE id = ? ";
        String UpdateCadtalhao = "update cad_talhao SET id_pluviometro = ? Where id = ?";
        try {
            Conexao.getConnection().setAutoCommit(false);
            PreparedStatement st = Conexao.getConnection().prepareStatement(insertPluv, Statement.RETURN_GENERATED_KEYS);
            st.setInt(1, IdPluviometro);
            st.execute();
            PreparedStatement stTalhao = Conexao.getConnection().prepareStatement(UpdateCadtalhao);
            for (int i = 0; i < JList.getModel().getSize(); i++) {
                if (JList.isSelectedIndex(i)) {
                    stTalhao.setInt(1, 0);
                    stTalhao.setInt(2, JList.getModel().getElementAt(i).getID());
                    stTalhao.addBatch();
                }
            }
            stTalhao.executeBatch();
            Conexao.getConnection().commit();
            JOptionPane.showMessageDialog(null, "Pluviometro excluído com sucesso!", "Registro Salvo com Sucesso", 0, FormatarICO.ICObtnOk());
        } catch (SQLException ex) {
            try {
                Conexao.getConnection().rollback();
                Conexao.getConnection().setAutoCommit(true);
            } catch (SQLException ex1) {
                Logger.getLogger(frmCadPluviometro.class.getName()).log(Level.SEVERE, null, ex1);
            }
            JOptionPane.showMessageDialog(null, ex + "Erro ao excluir registro! ", "Erro", 0, FormatarICO.ICObtnSair());
            return false;
        }
        return true;

    }

    class ListcellRenderer implements ListCellRenderer {

        JCheckBox ch;
        JLabel label;

        @Override
        public Component getListCellRendererComponent(JList jlist, Object e, int i, boolean isSelected, boolean cellHasFocus) {

            ch = new JCheckBox();
            ch.setPreferredSize(new Dimension(80, 20));

            if (isSelected) {
                ch.setSelected(true);
            }

            ch.setText("T - " + jlist.getModel().getElementAt(i).toString() + "");
            return ch;
        }

    }

}
