/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Beans.ListFazendasBeans;
import Beans.ListPluviometroBeans;
import DAO.Diversas;
import static GUI.Principal.ListFazPermitidas;
import static GUI.Principal.listPluviometro;
import Icones.FormatarICO;
import Utilitarios.CentralizarTabela;
import Utilitarios.Conexao;
import Utilitarios.Corretores;
import com.toedter.calendar.JDateChooser;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.math.BigDecimal;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class frmPluviosidade extends javax.swing.JInternalFrame {

    Diversas DiversasD;
    CentralizarTabela Centralizar;
    DefaultTableModel TbChuvas;
    CellRendererChuvas cellRenderer;

    public frmPluviosidade() {
        initComponents();
        DiversasD = new Diversas();
        Centralizar = new CentralizarTabela();
        cellRenderer = new CellRendererChuvas();
        carregarFazPermitidas();
        carregarPluviometrosPesquisa();
        tabelaChuvas();
        desabilitarCampos();
        TbChuvas = (DefaultTableModel) tb_chuvas.getModel();
    }

    private void carregarFazPermitidas() {
        ListFazPermitidas = new ArrayList<>();
        if (ListFazPermitidas.isEmpty()) {
            ListFazPermitidas = DiversasD.ListpmFazenda();
        }
        ListFazendasBeans l = new ListFazendasBeans();
        l.setID(0);
        l.setNomeFazenda("-");
        cb_fazenda.addItem(l);
        for (ListFazendasBeans list : ListFazPermitidas) {
            cb_fazenda.addItem(list);
        }
    }

    private void carregarPluviometros(Integer IdFazenda) {
        if (listPluviometro == null) {
            listPluviometro = DiversasD.ListPluviometro();
        }

        ListPluviometroBeans b = new ListPluviometroBeans();
        b.setID(0);
        b.setDescricao("-");
        cb_pluviometro.removeAllItems();
        cb_pluviometro.addItem(b);
        for (ListPluviometroBeans list : listPluviometro) {
            if (Objects.equals(list.getIdFazenda(), IdFazenda)) {
                cb_pluviometro.addItem(list);
            }
        }
    }

    private void carregarPluviometrosPesquisa() {
        if (listPluviometro == null) {
            listPluviometro = DiversasD.ListPluviometro();
        }
        ListPluviometroBeans b = new ListPluviometroBeans();
        b.setID(0);
        b.setDescricao("-");
        cb_pluviometro1.removeAllItems();
        cb_pluviometro1.addItem(b);
        for (ListPluviometroBeans list : listPluviometro) {
            cb_pluviometro1.addItem(list);
        }
    }

    private JTable tabelaChuvas() {
        Centralizar.centralizarTabela(tb_chuvas);
        ((DefaultTableCellRenderer) tb_chuvas.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        tb_chuvas.getColumnModel().getColumn(1).setCellRenderer(cellRenderer);
        tb_chuvas.getColumnModel().getColumn(2).setCellRenderer(cellRenderer);
        tb_chuvas.getColumnModel().getColumn(3).setCellRenderer(cellRenderer);
        tb_chuvas.getColumnModel().getColumn(4).setCellRenderer(cellRenderer);
        tb_chuvas.getColumnModel().getColumn(5).setCellRenderer(cellRenderer);
        tb_chuvas.getColumnModel().getColumn(6).setCellRenderer(cellRenderer);
        tb_chuvas.getColumnModel().getColumn(7).setCellRenderer(cellRenderer);
        tb_chuvas.getColumnModel().getColumn(8).setCellRenderer(cellRenderer);
        tb_chuvas.getColumnModel().getColumn(9).setCellRenderer(cellRenderer);
        tb_chuvas.getColumnModel().getColumn(10).setCellRenderer(cellRenderer);
        tb_chuvas.getColumnModel().getColumn(11).setCellRenderer(cellRenderer);
        tb_chuvas.getColumnModel().getColumn(12).setCellRenderer(cellRenderer);

        return tb_chuvas;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tb_chuvas = new javax.swing.JTable();
        jXTaskPane1 = new org.jdesktop.swingx.JXTaskPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txt_data =  new JDateChooser("dd/MM/yyyy", "##/##/#####", '_');
        jLabel2 = new javax.swing.JLabel();
        cb_fazenda = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txt_chuva = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cb_pluviometro = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txt_ano = new com.toedter.calendar.JYearChooser();
        cb_pluviometro1 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        btn_novo = new javax.swing.JButton();
        btn_Salvar = new javax.swing.JButton();
        btn_editar = new javax.swing.JButton();
        btn_excluir = new javax.swing.JButton();
        btn_pesquisar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Registro de Chuvas");

        tb_chuvas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Dia", "Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_chuvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_chuvasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tb_chuvas);
        if (tb_chuvas.getColumnModel().getColumnCount() > 0) {
            tb_chuvas.getColumnModel().getColumn(0).setResizable(false);
            tb_chuvas.getColumnModel().getColumn(1).setResizable(false);
            tb_chuvas.getColumnModel().getColumn(2).setResizable(false);
            tb_chuvas.getColumnModel().getColumn(3).setResizable(false);
            tb_chuvas.getColumnModel().getColumn(4).setResizable(false);
            tb_chuvas.getColumnModel().getColumn(5).setResizable(false);
            tb_chuvas.getColumnModel().getColumn(6).setResizable(false);
            tb_chuvas.getColumnModel().getColumn(7).setResizable(false);
            tb_chuvas.getColumnModel().getColumn(8).setResizable(false);
            tb_chuvas.getColumnModel().getColumn(9).setResizable(false);
            tb_chuvas.getColumnModel().getColumn(10).setResizable(false);
            tb_chuvas.getColumnModel().getColumn(11).setResizable(false);
            tb_chuvas.getColumnModel().getColumn(12).setResizable(false);
        }

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Data");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Fazenda");

        cb_fazenda.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_fazendaItemStateChanged(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Volume de Chuva");

        txt_chuva.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_chuva.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_chuvaFocusGained(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Pluviometro");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_data, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cb_fazenda, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cb_pluviometro, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_chuva, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(txt_data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(cb_fazenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(txt_chuva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(cb_pluviometro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jXTaskPane1.getContentPane().add(jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Pluviometro");

        txt_ano.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Ano");

        btn_novo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/inserir_40x40.png"))); // NOI18N
        btn_novo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btn_novo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_novo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_novoActionPerformed(evt);
            }
        });

        btn_Salvar.setBackground(new java.awt.Color(255, 255, 255));
        btn_Salvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/salvar.png"))); // NOI18N
        btn_Salvar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btn_Salvar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_Salvar.setDisabledIcon(null);
        btn_Salvar.setEnabled(false);
        btn_Salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SalvarActionPerformed(evt);
            }
        });

        btn_editar.setBackground(new java.awt.Color(255, 255, 255));
        btn_editar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/editar_pequeno.png"))); // NOI18N
        btn_editar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btn_editar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_editar.setEnabled(false);
        btn_editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editarActionPerformed(evt);
            }
        });

        btn_excluir.setBackground(new java.awt.Color(255, 255, 255));
        btn_excluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/deletar_40x40.png"))); // NOI18N
        btn_excluir.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btn_excluir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_excluir.setEnabled(false);
        btn_excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_excluirActionPerformed(evt);
            }
        });

        btn_pesquisar.setText("Pesquisar");
        btn_pesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pesquisarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cb_pluviometro1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_ano, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_pesquisar, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                .addComponent(btn_novo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_Salvar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_editar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_excluir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(txt_ano, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cb_pluviometro1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btn_novo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_Salvar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_editar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_excluir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btn_pesquisar))
                .addContainerGap())
        );

        jXTaskPane1.getContentPane().add(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jXTaskPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jXTaskPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_novoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_novoActionPerformed
        btn_Salvar.setEnabled(true);
        btn_editar.setEnabled(false);
        btn_excluir.setEnabled(false);
        habilitarCampos();
        limparCampos();
    }//GEN-LAST:event_btn_novoActionPerformed

    private void btn_SalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SalvarActionPerformed
        int cadastrar = JOptionPane.showConfirmDialog(null, "Deseja Salvar esta Escala de Gado?", "Atenção", JOptionPane.YES_NO_OPTION);
        if (cadastrar == JOptionPane.YES_OPTION) {
            String data = new SimpleDateFormat("dd/MM/yyyy").format(txt_data.getDate());
            if (verificarLancamentos(data, getIdPluviometro(cb_pluviometro))) {
                if (inserirRegistro()) {
                    limparCampos();
                    desabilitarCampos();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Lançamento já existente para este pluviometro! ", "Erro", 0, FormatarICO.ICObtnSair());
            }

        }
    }//GEN-LAST:event_btn_SalvarActionPerformed

    private void btn_editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editarActionPerformed
        int editar = JOptionPane.showConfirmDialog(null, "Deseja editar esta Escala de Gado?", "Atenção", JOptionPane.YES_NO_OPTION);
        if (editar == JOptionPane.YES_OPTION) {
            String data = new SimpleDateFormat("dd/MM/yyyy").format(txt_data.getDate());
            if (verificarLancamentos(data, getIdPluviometro(cb_pluviometro)) == false) {
                if (editarRegistro()) {
                    limparCampos();
                    desabilitarCampos();
                    btn_editar.setEnabled(false);
                    btn_excluir.setEnabled(false);
                }
            } else {
                JOptionPane.showMessageDialog(null, "A data selecionada não foi registrada ainda!", "Erro", 0, FormatarICO.ICObtnSair());
            }
        }
    }//GEN-LAST:event_btn_editarActionPerformed

    private void btn_excluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_excluirActionPerformed
        int excluir = JOptionPane.showConfirmDialog(null, "Deseja excluir esta Escala de Gado?", "Atenção", JOptionPane.YES_NO_OPTION);
        if (excluir == JOptionPane.YES_OPTION) {
            if (excluirRegistro()) {
                limparCampos();
                desabilitarCampos();
                btn_editar.setEnabled(false);
                btn_excluir.setEnabled(false);
            }
        }
    }//GEN-LAST:event_btn_excluirActionPerformed

    private void cb_fazendaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_fazendaItemStateChanged
        carregarPluviometros(getIdFazenda(cb_fazenda));
    }//GEN-LAST:event_cb_fazendaItemStateChanged

    private void btn_pesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pesquisarActionPerformed
        int ano = txt_ano.getYear();
        if (cb_pluviometro1.getSelectedIndex() > 0) {
            pesquisarChuvas(TbChuvas, ano, getIdPluviometro(cb_pluviometro1));
        } else {
            JOptionPane.showMessageDialog(null, "Selecione o pluviomeytro desejado! ", "Erro", 0, FormatarICO.ICObtnSair());
        }
    }//GEN-LAST:event_btn_pesquisarActionPerformed

    private void tb_chuvasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_chuvasMouseClicked
        if (evt.getClickCount() == 2) {
            int linha = tb_chuvas.getSelectedRow();
            int coluna = tb_chuvas.getSelectedColumn();
            if (linha <= 30) {
                String dataString = TbChuvas.getValueAt(linha, 0).toString() + "/" + (coluna) + "/" + txt_ano.getYear();
                try {
                    Date data = new SimpleDateFormat("dd/MM/yyyy").parse(dataString);
                    txt_data.setDate(data);
                    setJComboBoxFazenda(cb_fazenda, cb_pluviometro1.getItemAt(cb_pluviometro1.getSelectedIndex()).getIdFazenda());
                    setJComboBoxPluviometro(cb_pluviometro, getIdPluviometro(cb_pluviometro1));
                    txt_chuva.setText(TbChuvas.getValueAt(linha, coluna).toString());
                    txt_chuva.setEnabled(true);
                    btn_editar.setEnabled(true);
                    btn_excluir.setEnabled(true);
                    btn_Salvar.setEnabled(false);
                    txt_chuva.setRequestFocusEnabled(true);
                } catch (ParseException ex) {
                    Logger.getLogger(frmPluviosidade.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }
    }//GEN-LAST:event_tb_chuvasMouseClicked

    private void txt_chuvaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_chuvaFocusGained
        txt_chuva.selectAll();
    }//GEN-LAST:event_txt_chuvaFocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton btn_Salvar;
    javax.swing.JButton btn_editar;
    javax.swing.JButton btn_excluir;
    javax.swing.JButton btn_novo;
    private javax.swing.JButton btn_pesquisar;
    private javax.swing.JComboBox<ListFazendasBeans> cb_fazenda;
    private javax.swing.JComboBox<ListPluviometroBeans> cb_pluviometro;
    private javax.swing.JComboBox<ListPluviometroBeans> cb_pluviometro1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXTaskPane jXTaskPane1;
    private javax.swing.JTable tb_chuvas;
    private com.toedter.calendar.JYearChooser txt_ano;
    private javax.swing.JTextField txt_chuva;
    private com.toedter.calendar.JDateChooser txt_data;
    // End of variables declaration//GEN-END:variables

    private Integer getIdFazenda(JComboBox<ListFazendasBeans> comboBox) {
        if (comboBox.getSelectedIndex() != 0) {
            return comboBox.getModel().getElementAt(comboBox.getSelectedIndex()).getID();
        }
        return 0;
    }

    private void habilitarCampos() {
        txt_data.setEnabled(true);
        cb_fazenda.setEnabled(true);
        cb_pluviometro.setEnabled(true);
        txt_chuva.setEnabled(true);

        btn_Salvar.setEnabled(true);

    }

    private void limparCampos() {
        txt_data.setDate(null);
        cb_fazenda.setSelectedIndex(0);
        cb_pluviometro.setSelectedIndex(0);
        cb_pluviometro1.setSelectedIndex(0);
        txt_chuva.setText("0");

    }

    private void popularBeans() {

    }

    private void desabilitarCampos() {
        txt_data.setEnabled(false);
        cb_fazenda.setEnabled(false);
        cb_pluviometro.setEnabled(false);
        txt_chuva.setEnabled(false);
        btn_Salvar.setEnabled(false);

    }

    private Integer getIdPluviometro(JComboBox<ListPluviometroBeans> comboBox) {
        if (comboBox.getSelectedIndex() != 0) {
            return comboBox.getModel().getElementAt(comboBox.getSelectedIndex()).getID();
        }
        return 0;
    }

    private String getData() {
        String s = new SimpleDateFormat("dd/MM/yyyy").format(txt_data.getDate());
        return s;
    }

    private void setJComboBoxFazenda(JComboBox<ListFazendasBeans> cb, Integer IdFazenda) {
        for (int i = 0; i < cb.getModel().getSize(); i++) {
            if (cb.getModel().getElementAt(i).getID() == IdFazenda) {
                cb.setSelectedIndex(i);
            }
        }
    }

    private void setJComboBoxPluviometro(JComboBox<ListPluviometroBeans> cb, Integer IdPluviometro) {
        for (int i = 0; i < cb.getModel().getSize(); i++) {
            if (cb.getModel().getElementAt(i).getID() == IdPluviometro) {
                cb.setSelectedIndex(i);
            }
        }
    }

    private Boolean verificarBeans() {
        if (cb_fazenda.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Verifique o campo Fazenda!", "Erro", 0, FormatarICO.ICObtnSair());
            return false;
        }
        if (cb_pluviometro.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Verifique o campo Pluviometro!", "Erro", 0, FormatarICO.ICObtnSair());
            return false;
        }
        if (Corretores.verificaDataMensal(txt_data.getDate()) == false) {
            JOptionPane.showMessageDialog(null, "Verifique o campo data!", "Erro", 0, FormatarICO.ICObtnSair());
            return false;
        }
        return true;
    }

    private Double SomarChuva(Integer mes) {
        double soma = 0.0;
        for (int i = 0; i <= (TbChuvas.getRowCount() - 1); i++) {
            double chuva = (Double) TbChuvas.getValueAt(i, mes);
            if (chuva > 0) {
                soma += chuva;
            }
        }
        return soma;
    }

    private Integer ContarDiasChuva(Integer mes) {
        Integer contador = 0;
        for (int i = 0; i <= (TbChuvas.getRowCount() - 1); i++) {
            if ((Double) TbChuvas.getValueAt(i, mes) > 0) {
                contador += 1;
            }
        }
        return contador;
    }

    // Metodos DAO
    public Boolean inserirRegistro() {
        Conexao.ReiniciarCon();
        String insert = "insert registro_chuva (id_pluviometro, data, volume) values (?,?,?)";
        try {
            PreparedStatement st = Conexao.getConnection().prepareStatement(insert);
            st.setInt(1, getIdPluviometro(cb_pluviometro));
            st.setString(2, Corretores.ConverterParaSQL(getData()));
            st.setDouble(3, Corretores.ConverterStringDouble(txt_chuva.getText()));
            st.execute();
            JOptionPane.showMessageDialog(null, "Chuva registrada com sucesso!", "Registro Salvo com Sucesso", 0, FormatarICO.ICObtnOk());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex + "Erro ao salvar registro! ", "Erro", 0, FormatarICO.ICObtnSair());
            return false;
        }
        return true;
    }

    public Boolean editarRegistro() {
        Conexao.ReiniciarCon();
        String update = "update registro_chuva SET volume = ? Where data = ? and id_pluviometro = ?;";
        try {
            PreparedStatement st = Conexao.getConnection().prepareStatement(update);
            st.setDouble(1, Corretores.ConverterStringDouble(txt_chuva.getText()));
            st.setString(2, Corretores.ConverterParaSQL(getData()));
            st.setInt(3, getIdPluviometro(cb_pluviometro));
            st.executeUpdate();
            JOptionPane.showMessageDialog(null, "Chuva editada com sucesso!", "Registro Salvo com Sucesso", 0, FormatarICO.ICObtnOk());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex + "Erro ao salvar registro! ", "Erro", 0, FormatarICO.ICObtnSair());
            return false;
        }
        return true;
    }

    public Boolean excluirRegistro() {
        Conexao.ReiniciarCon();
        String update = "delete from registro_chuva Where data = ? and id_pluviometro = ?";
        try {
            PreparedStatement st = Conexao.getConnection().prepareStatement(update);
            st.setString(1, Corretores.ConverterParaSQL(getData()));
            st.setInt(2, getIdPluviometro(cb_pluviometro));
            st.executeUpdate();
            JOptionPane.showMessageDialog(null, "Registro excluído com sucesso!", "Registro Salvo com Sucesso", 0, FormatarICO.ICObtnOk());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex + "Erro ao excluir registro! ", "Erro", 0, FormatarICO.ICObtnSair());
            return false;
        }
        return true;
    }

    public void pesquisarChuvas(DefaultTableModel TbChuvas, Integer Ano, Integer IdPluviometro) {
        Conexao.ReiniciarCon();
        String Select = "select distinct dayofmonth(rg.data) as Dia,\n"
                + "Sum(CASE WHEN month(rg.data) = 1 THEN rg.volume ELSE 0 END) as Janeiro,\n"
                + "Sum(CASE WHEN month(rg.data) = 2 THEN rg.volume ELSE 0 END) as Fevereiro,\n"
                + "Sum(CASE WHEN month(rg.data) = 3 THEN rg.volume ELSE 0 END) as Marco,\n"
                + "Sum(CASE WHEN month(rg.data) = 4 THEN rg.volume ELSE 0 END) as Abril,\n"
                + "Sum(CASE WHEN month(rg.data) = 5 THEN rg.volume ELSE 0 END) as Maio,\n"
                + "Sum(CASE WHEN month(rg.data) = 6 THEN rg.volume ELSE 0 END) as Junho,\n"
                + "Sum(CASE WHEN month(rg.data) = 7 THEN rg.volume ELSE 0 END) as Julho,\n"
                + "Sum(CASE WHEN month(rg.data) = 8 THEN rg.volume ELSE 0 END) as Agosto,\n"
                + "Sum(CASE WHEN month(rg.data) = 9 THEN rg.volume ELSE 0 END) as Setembro,\n"
                + "Sum(CASE WHEN month(rg.data) = 10 THEN rg.volume ELSE 0 END) as Outubro,\n"
                + "Sum(CASE WHEN month(rg.data) = 11 THEN rg.volume ELSE 0 END) as Novembro,\n"
                + "Sum(CASE WHEN month(rg.data) = 12 THEN rg.volume ELSE 0 END) as Dezembro\n"
                + "from registro_chuva rg where year(rg.data) = ? and rg.id_pluviometro = ?\n"
                + "group by Dia order by Dia ";

        try {
            PreparedStatement st = Conexao.getConnection().prepareStatement(Select);
            st.setInt(1, Ano);
            st.setInt(2, IdPluviometro);
            TbChuvas.setNumRows(0);
            ResultSet rs = st.executeQuery();
            while (rs.next()) {
                TbChuvas.addRow(new Object[]{rs.getInt("Dia"), rs.getDouble("Janeiro"), rs.getDouble("Fevereiro"),
                    rs.getDouble("Marco"), rs.getDouble("Abril"), rs.getDouble("Maio"), rs.getDouble("Junho"),
                    rs.getDouble("Julho"), rs.getDouble("Agosto"), rs.getDouble("Setembro"), rs.getDouble("Outubro"),
                    rs.getDouble("Novembro"), rs.getDouble("Dezembro")});
            }
            // somar chuva mensal
            TbChuvas.addRow(new Object[]{"Acum", SomarChuva(1), SomarChuva(2), SomarChuva(3), SomarChuva(4), SomarChuva(5),
                SomarChuva(6), SomarChuva(7), SomarChuva(8), SomarChuva(9), SomarChuva(10), SomarChuva(11), SomarChuva(12)});
            // contar dias de chuva
            TbChuvas.addRow(new Object[]{"Nº Dias", ContarDiasChuva(1), ContarDiasChuva(2), ContarDiasChuva(3), ContarDiasChuva(4),
                ContarDiasChuva(5), ContarDiasChuva(6), ContarDiasChuva(7), ContarDiasChuva(8), ContarDiasChuva(9),
                ContarDiasChuva(10), ContarDiasChuva(11), ContarDiasChuva(12)});
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex + "Erro ao salvar registro! ", "Erro", 0, FormatarICO.ICObtnSair());
        }
    }

    public Boolean verificarLancamentos(String Data, Integer IdPluviometro) {
        Boolean b = false;
        Conexao.ReiniciarCon();
        String Select = "select count(rg.id) from registro_chuva rg Where rg.data = ? and rg.id_pluviometro = ?;";
        try {
            PreparedStatement st = Conexao.getConnection().prepareStatement(Select);
            st.setString(1, Corretores.ConverterParaSQL(Data));
            st.setInt(2, IdPluviometro);
            ResultSet rs = st.executeQuery();
            while (rs.next()) {
                if (rs.getInt(1) > 0) {
                    b = false;
                } else {
                    b = true;
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex + "Erro ao pesquisar lançamentos! ", "Erro", 0, FormatarICO.ICObtnSair());
            b = false;
        }
        return b;
    }

    // Classe interna Cell Renderer
    class CellRendererChuvas extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setHorizontalAlignment(SwingConstants.CENTER);
            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            Object val = table.getValueAt(row, column);

            if (val instanceof BigDecimal) {

            } else if (val instanceof Double) {
                //   Double valorD = (Double) val;
                //   setText(new DecimalFormat("#,###,##0.00").format(valorD));
            }

            if (isSelected) {
                return this;
            }
            if (table.getRowCount() > 0) {
                if (column >= 1 && row < table.getRowCount() - 2) {
                    double chuva = Double.parseDouble(table.getValueAt(row, column).toString());
                    if (chuva > 0) {
                        Color verde = new Color(51, 153, 0);
                        setBackground(verde);

                    } else if (chuva == 0) {
                        Color vermelho = new Color(244, 176, 132);
                        setBackground(vermelho);
                    }
                } else {
                    setFont(new Font("Tahoma", Font.BOLD, 11));
                    setBackground(table.getBackground());
                    setForeground(table.getForeground());
                }
            }
            return this;
        }
    }

}
